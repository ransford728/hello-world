1.	Compose a program that takes two integers m and dfrom the command line and writes True if day d of month m is between March 20 and June 20, and False otherwise. (Interpret m with 1 for January, 2 for February, and so forth.)
2.	Continuously compounded interest. Compose a program that calculates and writes the amount of money you would have if you invested it at a given interest rate compounded continuously, taking the number of years t, the principal P, and the annual interest rate r as command-line arguments. The desired value is given by the formula Pe rt .
3.	Wind chill. Given the temperature T (in degrees Fahrenheit) and the wind speed v (in miles per hour), the National Weather Service defines the effective temperature (the wind chill) to be: w = 35.74 + 0.6215 T + (0.4275 T – 35.75) 
4.	Compose a program that takes two floats t and v from the command line and writes out the wind chill. 
Note: This formula is not valid if t is larger than 50 in absolute value or if v is larger than 120 or less than 3 (you may assume that the val‐ues you get are in that range).
5.	Polar coordinates. Compose a program that converts from Cartesian to polar coordinates. Your program should accept two floats x and y from the command line and write the polar coordinates r and θ. Use the Python function math.atan2(y, x), which computes the arctangent value ofy/x that is in the range from –π to π.
6.	Gaussian random numbers. One way to generate a random number taken from the Gaussian distribution is to use the Box-Muller formula w = sin(2 π v) (–2 ln u) ½ where u and v are real numbers between 0 and 1 generated by the Math.random() method. Compose a program that writes a standard Gaussian random variable.
7.	Order check. Compose a program that accepts three floats x, y, and z as command-line arguments and writes True if the values are strictly ascending or descending  (x < < z or x > y > z), and False otherwise.
8.	Day of the week. Compose a program that accepts a date as input and writes the day of the week that date falls on. Your program should accept three command-line arguments: m (month), d (day), and y (year). For m, use 1 for January, 2 for February, and so forth. For output, write 0 for Sunday, 1 or Monday, 2 for Tuesday, and so forth. 
Use the following formulas for the Gregorian calendar: y 0 = y – (14 – m) / 1 x = y 0 + y 0 /4 – y 0 /100 + y 0 /400 m 0 = m + 12 × ((14 – m) / 12) – 2 d 0 = (d + x + (31×m 0 )/12) % 7
Example: On what day of the week was February 14, 2000? y 0 = 2000 – 1 = 1999
x = 1999 + 1999/4 – 1999/100 + 1999/400 = 2483 m 0 = 2 + 12×1 – 2 = 12
d 0 = (14 + 2483 + (31×12) / 12) % 7 = 2500 % 7
= 1 (Monday) Compose a program that writes five uniform random floats between 0.0 and 1.0, their average value, and their minimum and maximum values. Use the built-in min() and max() functions.











"""(1)
month = int(input('month'))
day = int(input("day"))
if month == 5 or 6 and day == 20:
    print('True')
else:
    print("False")
"""


"""(2)
current_balance = 200
time_in_years = 1
annual_rate = 3/100
annual_interest = (current_balance * time_in_years * annual_rate)
print(annual_interest)

new_current_balance = annual_interest + current_balance
print(new_current_balance)
total_time_in_years = 5
compound_interest = annual_interest * total_time_in_years + new_current_balance * 5
print(compound_interest)"""


"""(3,4)
T_in_Fahrenheit = 35.5
T_in_celcius = T_in_Fahrenheit - 32 * 5/9
print(T_in_celcius)
v_in_miles_per_hour = 50
v_in_km = v_in_miles_per_hour * 1.609344
w = 35.74 + 0.6215 * T_in_celcius + (0.4275 * T_in_celcius - 35.75) * v_in_km
"""

"""(5)
import math
x = 4.5
y = 5.8

r = math.sqrt(x + y)**2
print(r)
o = math.atan2(y, x)
print(o)"""





"""(7)
x = 1.5
y = 2.5
z = 3.5
if x < y < z:
    print(True)
else:
    print(False)"""


